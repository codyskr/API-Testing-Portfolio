{
	"info": {
		"_postman_id": "d7a2938a-c7f8-460a-94a1-ecb25ba39e25",
		"name": "API Testing Portfolio",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29597492"
	},
	"item": [
		{
			"name": "CRUD",
			"item": [
				{
					"name": "GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"checking the sent message\", function () {\r",
									"     pm.expect(pm.response.json()).to.be.an('object');\r",
									"     pm.expect(pm.response.json().title).to.exist.and.to.be.a('string');\r",
									"     pm.expect(pm.response.json().body).to.exist.and.to.be.a('string');\r",
									"     pm.expect(pm.response.json().userId).to.exist.and.to.be.a('number');\r",
									"     pm.expect(pm.response.json().id).to.exist.and.to.be.a('number');\r",
									"     });\r",
									"pm.test(\"response timeout checking\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});     "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"2\",\r\n    \"body\": \"222\",\r\n    \"userId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"checking the sent message\", function () {\r",
									"     pm.expect(pm.response.json()).to.be.an('object');\r",
									"     pm.expect(pm.response.json().title).to.exist.and.to.be.a('string');\r",
									"     pm.expect(pm.response.json().body).to.exist.and.to.be.a('string');\r",
									"     pm.expect(pm.response.json().userId).to.exist.and.to.be.a('number');\r",
									"     pm.expect(pm.response.json().id).to.exist.and.to.be.a('number');\r",
									"     });\r",
									"pm.test(\"response timeout checking\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});     \r",
									"\r",
									"pm.test(\"Post has been updated\", function () {\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.title).to.eql(\"Updated title\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"title\": \"Updated title\",\r\n    \"body\": \"Message\",\r\n    \"userId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"checking the sent message\", function () {\r",
									"     pm.expect(pm.response.json().title).to.exist.and.to.be.a('string');\r",
									"     });\r",
									"pm.test(\"response timeout checking\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});     \r",
									"\r",
									"pm.test(\"The title has been updated\", function(){\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.title).to.eql(\"partly updated - title\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n    \"title\": \"partly updated - title\"  \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response timeout checking\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});     \r",
									"\r",
									"pm.test(\"response is empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(Object.keys(jsonData).length).to.equal(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorisation",
			"item": [
				{
					"name": "getting a token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"email\", \"eve.holt@reqres.in\");\r",
									"pm.environment.set(\"password\", \"cityslicka\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response contains a token\", function () {\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"token\");\r",
									"    pm.environment.set(\"token\", response.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET + token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"the response contains an array\", function() {\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.data).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users?page=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}